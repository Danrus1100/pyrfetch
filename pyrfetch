#!/usr/bin/env python3

import platform
import socket
import psutil
import subprocess
import time
import argparse
import json
import shutil
import re

COLORS = {
    "default": "\033[0m",
    "blanc": "\033[37m",
    "rouge": "\033[31m",
    "vert": "\033[32m",
    "jaune": "\033[33m",
    "bleu": "\033[34m",
    "violet": "\033[35m",
    "cyan": "\033[36m",
    "rose": "\033[95m",
    "orange": "\033[91m",
    "lime": "\033[92m",
    "azur": "\033[94m",
    "magenta": "\033[95m",
    "turquoise": "\033[96m",
}

ASCII_ARTS = {
    "Arch": [
        "      /\\           ",
        "     /  \\          ",
        "    /    \\         ",
        "   /      \\        ",
        "  /   ,,   \\       ",
        " /   |  |   \\      ",
        "/_-''    ''-_\\     "
    ],
    "Gentoo": [
        "   .-----.         ",
        " ./       \\.       ",
        "/   .---.   \\      ",
        "|  /     \\  |      ",
        "|  \\     /  |      ",
        "\\   `---'   /      ",
        " `.___.__.'        "
    ],
    "Ubuntu": [
        "    _____         ",
        "   /  __ \\        ",
        "  |  /  \\ |       ",
        "  |  \\__/ |       ",
        "   \\____/_        ",
        "    ____          ",
        "                  "
    ],
    "Fedora": [
        "      _____       ",
        "     /   __\\      ",
        "    |  /    |     ",
        "    |  \\___-      ",
        "    |  ____\\      ",
        "    |  |          ",
        "     \\__|         "
    ],
    "Kali": [
        "    .---.         ",
        "   /     \\        ",
        "  /  \\ /  \\       ",
        " |   █ █   |      ",
        "  \\  \\^/  /       ",
        "   \\     /        ",
        "    `---'         "
    ],
    "macOS": [
        "    ____          ",
        "   /   /\\         ",
        "  /   /  \\        ",
        " /   /    \\       ",
        "/   /  __  \\      ",
        "\\  /  /  \\  \\     ",
        " \\/___/\\__\\/      "
    ],
    "Debian": [
        "     ,----,       ",
        "   .'   .' \\      ",
        "  /    /    ;     ",
        " :    :    /      ",
        " :    :   /       ",
        " |    |  /        ",
        " `----''          "
    ],
    "Mint": [
        "   __________     ",
        "  |_    _   _|    ",
        "    |  | | |      ",
        "    |  | | |      ",
        "    |  | | |      ",
        "    |  |_| |      ",
        "    |______|      "
    ],
    "Pop": [
        "   ______        ",
        "  /      \\       ",
        " /   __   \\      ",
        "|   |  |   |     ",
        "|   |__|   |     ",
        " \\        /      ",
        "  \\______/       "
    ],
    "Default": [
        "   _______       ",
        "  |       |      ",
        "  |  [ ]  |      ",
        "  |       |      ",
        "  |  ___  |      ",
        "  | |   | |      ",
        "  |_|___|_|      "
    ]
}

def get_os_name():
    try:
        with open("/etc/os-release", "r") as file:
            content = file.read().lower()
            os_mapping = {
                "arch": "Arch",
                "gentoo": "Gentoo",
                "ubuntu": "Ubuntu",
                "fedora": "Fedora",
                "kali": "Kali",
                "debian": "Debian",
                "mint": "Mint",
                "pop!_os": "Pop",
                "pop_os": "Pop",
            }
            for key, name in os_mapping.items():
                if key in content:
                    return name

            match = re.search(r'pretty_name="(.+)"', content)
            if match:
                return match.group(1)
    except FileNotFoundError:
        if platform.system() == "Darwin": return "macOS"
    return "Default"

def get_ascii_art(os_name):
    if os_name in ASCII_ARTS:
        return ASCII_ARTS[os_name]
    for key in ASCII_ARTS:
        if key.lower() in os_name.lower():
            return ASCII_ARTS[key]
    return ASCII_ARTS["Default"]

def format_uptime(seconds):
    days, seconds = divmod(seconds, 86400)
    hours, seconds = divmod(seconds, 3600)
    minutes, seconds = divmod(seconds, 60)
    return f"{days}d {hours}h {minutes}m {seconds}s" if days else f"{hours}h {minutes}m {seconds}s"

def get_gpu_name():
    gpu = "N/A"
    if shutil.which("nvidia-smi"):
        try:
            result = subprocess.run(["nvidia-smi", "--query-gpu=name", "--format=csv,noheader"], stdout=subprocess.PIPE, text=True, check=True)
            gpu = result.stdout.strip()
        except subprocess.CalledProcessError:
            gpu = "Erreur avec nvidia-smi"
    else:
        try:
            result = subprocess.run(["lspci"], stdout=subprocess.PIPE, text=True, check=True)
            for line in result.stdout.splitlines():
                if "VGA compatible controller" in line or "3D controller" in line:
                    gpu = line.split(":")[2].strip()
                    break
        except subprocess.CalledProcessError:
            gpu = "Erreur avec lspci"
    return gpu

def get_system_info(show_percentage, include_disk, include_temp, export_file, distro=None, color="default"):
    os_name = distro if distro else get_os_name()
    kernel = platform.release()
    hostname = socket.gethostname()
    boot_time = psutil.boot_time()
    uptime_seconds = int(time.time() - boot_time)
    uptime_str = format_uptime(uptime_seconds)
    
    cpu_name = "Unknown" 
    try:
        with open("/proc/cpuinfo", "r") as f:
            for line in f:
                if "model name" in line:
                    cpu_name = line.split(":")[1].strip()
                    break
    except FileNotFoundError:
        if platform.system() == "Darwin":
            try:
                result = subprocess.run(["sysctl", "-n", "machdep.cpu.brand_string"], capture_output=True, text=True, check=True)
                cpu_name = result.stdout.strip()
            except subprocess.CalledProcessError:
                pass

    gpu = get_gpu_name()
    ram = psutil.virtual_memory()
    ram_info = f"{ram.percent}%" if show_percentage else f"{ram.used / (1024 ** 3):.2f}/{ram.total / (1024 ** 3):.2f} Go"
    
    disk_info = "N/A"
    if include_disk:
        disk = psutil.disk_usage('/')
        disk_info = f"{disk.used / (1024 ** 3):.2f}/{disk.total / (1024 ** 3):.2f} Go ({disk.percent}%)"

    temperature = "N/A"
    if include_temp:
        try:
            temp = psutil.sensors_temperatures()
            if 'coretemp' in temp:
                temperature = f"{temp['coretemp'][0].current}°C"
        except (AttributeError, KeyError):
            pass

    info = [
        f"OS: {os_name}",
        f"Kernel: {kernel}",
        f"Hostname: {hostname}",
        f"Uptime: {uptime_str}",
        f"RAM: {ram_info}",
        f"CPU: {cpu_name}",
        f"GPU: {gpu}",
        f"Disk: {disk_info if include_disk else 'N/A'}",
        f"Temp: {temperature}",
        "", ""
    ]

    ascii_art = get_ascii_art(os_name)
    color_code = COLORS.get(color, COLORS["default"])

    print("")
    for i in range(len(ascii_art)):
        if i < len(info):
            print(f"{color_code}{ascii_art[i]}{info[i]}{COLORS['default']}")
        else:
            print(f"{color_code}{ascii_art[i]}{COLORS['default']}")
    print("")

    if export_file:
        data = {
            "OS": os_name,
            "Kernel": kernel,
            "Hostname": hostname,
            "Uptime": uptime_str,
            "CPU": cpu_name,
            "RAM": ram_info,
            "GPU": gpu,
            "Disk": disk_info if include_disk else "N/A",
            "Temp": temperature
        }
        with open(export_file, 'w') as f:
            json.dump(data, f, indent=4)
        print(f"\nInformations exportées vers {export_file}")

def parse_args():
    parser = argparse.ArgumentParser(description="Affiche des informations système avec ASCII art spécifique à l'OS.")
    parser.add_argument("--pourcentage", "-p",action="store_true", help="Afficher l'utilisation de la RAM en pourcentage.")
    parser.add_argument("--disk", "-d", action="store_true", help="Inclure les informations sur l'espace disque.")
    parser.add_argument("--temp", "-t", action="store_true", help="Inclure la température des composants (si disponible).")
    parser.add_argument("--export", "-e", type=str, help="Exporter les informations dans un fichier JSON.")
    parser.add_argument("--distro", "-di", type=str, choices=list(ASCII_ARTS.keys()), help="Spécifier manuellement la distribution à afficher.")
    parser.add_argument("--color", "-c", type=str, choices=list(COLORS.keys()), default="default", help="Choisir la couleur de l'ASCII art.")
    parser.add_argument("--version", "-v", action="version", version="pyrfetch 1.1")
    return parser.parse_args()

if __name__ == "__main__":
    args = parse_args()
    get_system_info(args.pourcentage, args.disk, args.temp, args.export, args.distro, args.color)
